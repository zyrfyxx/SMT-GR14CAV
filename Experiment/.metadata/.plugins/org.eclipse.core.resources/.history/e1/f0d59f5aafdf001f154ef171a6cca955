spec ConstraintSolving

/*
 * Auto-generated Spectra file
 */
 

 
env boolean carMain;
env boolean carSide;
env boolean boolVar_1429656909;
env boolean boolVar_333013856;
 env boolean pedestrianBtn;
 env boolean ambulanceMain;

 sys {MAIN , SIDE , NONE} go;
 sys boolean greenMain;
 sys boolean greenSide;
 sys boolean greenPedestrian;
 
 asm ini !( boolVar_333013856 & boolVar_1429656909 );
asm ini !( !boolVar_333013856 & !boolVar_1429656909 );
asm alw !( boolVar_333013856 & boolVar_1429656909 );
asm alw !( !boolVar_333013856 & !boolVar_1429656909 );

 predicate excl( boolean p , boolean q):
 !(p & q);

 gar alw excl(greenMain , greenSide) &
 excl( greenPedestrian , greenSide);

 define streetsEmpty :=
 !carSide & !carMain & !ambulanceMain;

 asm ini streetsEmpty;
 asm ini carSide= false & carMain= false ;
 asm alwEv carSide;
 asm alwEv carMain;
 asm alwEv ONCE carSide;

 gar ini go=NONE;
gar alw boolVar_1429656909 ->next (go=MAIN);
gar alw boolVar_333013856 ->next (go=SIDE);
 gar alw streetsEmpty implies
 !greenMain & !greenSide;
 gar alw !(greenMain & greenSide);
 gar alwEv carSide & greenSide;
 gar alwEv carMain & greenMain;

 monitor boolean needGreenMain {
 ini needGreenMain =
 (pedestrianBtn & !greenPedestrian);
 trans next (needGreenMain) =
 ((needGreenMain | pedestrianBtn) &
 !greenPedestrian);
 }
 gar alwEv !needGreenMain;

 counter ambulanceWait (0..5) {
 inc: ambulanceMain & !greenMain;
 reset: greenMain;
 overflow: keep;
 }
 gar alw ambulanceWait < 5;

gar pRespondsToS( carMain , greenMain);
gar pRespondsToS( carSide , greenSide);

pattern pRespondsToS(p, s) {
  var { S0, S1} state;

  -- initial assignments: initial state
  state=S0;

  -- safety this and next state
  G ((state=S0 & ((!p) | (p & s)) & next(state=S0)) |
  (state=S0 & (p & !s) & next(state=S1)) |
  (state=S1 & (s) & next(state=S0)) |
  (state=S1 & (!s) & next(state=S1)));

  -- equivalence of satisfaction
  GF (state=S0);
}